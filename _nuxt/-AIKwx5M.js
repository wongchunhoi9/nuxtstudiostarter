import{u as w,S as u,c as D,U as B,V as H,K as M,W as P,X as R,Y as S,Z as V,D as C,L as E,$ as N,e as K}from"./DcfiZ5fl.js";const j=s=>s==="defer"||s===!1;function F(...s){var g;const n=typeof s[s.length-1]=="string"?s.pop():void 0;typeof s[0]!="string"&&s.unshift(n);let[e,f,a={}]=s;if(typeof e!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof f!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const t=w(),b=f,p=()=>u.value,O=()=>t.isHydrating?t.payload.data[e]:t.static.data[e];a.server??(a.server=!0),a.default??(a.default=p),a.getCachedData??(a.getCachedData=O),a.lazy??(a.lazy=!1),a.immediate??(a.immediate=!0),a.deep??(a.deep=u.deep),a.dedupe??(a.dedupe="cancel");const d=a.getCachedData(e,t),_=d!=null;if(!t._asyncData[e]||!a.immediate){(g=t.payload._errors)[e]??(g[e]=u.errorValue);const i=a.deep?D:B;t._asyncData[e]={data:i(_?d:a.default()),pending:D(!_),error:H(t.payload._errors,e),status:D("idle"),_default:a.default}}const r={...t._asyncData[e]};delete r._default,r.refresh=r.execute=(i={})=>{if(t._asyncDataPromises[e]){if(j(i.dedupe??a.dedupe))return t._asyncDataPromises[e];t._asyncDataPromises[e].cancelled=!0}if(i._initial||t.isHydrating&&i._initial!==!1){const l=i._initial?d:a.getCachedData(e,t);if(l!=null)return Promise.resolve(l)}r.pending.value=!0,r.status.value="pending";const o=new Promise((l,c)=>{try{l(b(t))}catch(y){c(y)}}).then(async l=>{if(o.cancelled)return t._asyncDataPromises[e];let c=l;a.transform&&(c=await a.transform(l)),a.pick&&(c=T(c,a.pick)),t.payload.data[e]=c,r.data.value=c,r.error.value=u.errorValue,r.status.value="success"}).catch(l=>{if(o.cancelled)return t._asyncDataPromises[e];r.error.value=V(l),r.data.value=C(a.default()),r.status.value="error"}).finally(()=>{o.cancelled||(r.pending.value=!1,delete t._asyncDataPromises[e])});return t._asyncDataPromises[e]=o,t._asyncDataPromises[e]},r.clear=()=>z(t,e);const h=()=>r.refresh({_initial:!0}),m=a.server!==!1&&t.payload.serverRendered;{const i=E();if(i&&m&&a.immediate&&!i.sp&&(i.sp=[]),i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const c=i._nuxtOnBeforeMountCbs;N(()=>{c.forEach(y=>{y()}),c.splice(0,c.length)}),K(()=>c.splice(0,c.length))}m&&t.isHydrating&&(r.error.value||d!=null)?(r.pending.value=!1,r.status.value=r.error.value?"error":"success"):i&&(t.payload.serverRendered&&t.isHydrating||a.lazy)&&a.immediate?i._nuxtOnBeforeMountCbs.push(h):a.immediate&&h();const o=S();if(a.watch){const c=M(a.watch,()=>r.refresh());o&&P(c)}const l=t.hook("app:data:refresh",async c=>{(!c||c.includes(e))&&await r.refresh()});o&&P(l)}const v=Promise.resolve(t._asyncDataPromises[e]).then(()=>r);return Object.assign(v,r),v}async function I(s){await new Promise(e=>R(e)),await w().hooks.callHookParallel("app:data:refresh",void 0)}function z(s,n){n in s.payload.data&&(s.payload.data[n]=void 0),n in s.payload._errors&&(s.payload._errors[n]=u.errorValue),s._asyncData[n]&&(s._asyncData[n].data.value=C(s._asyncData[n]._default()),s._asyncData[n].error.value=u.errorValue,s._asyncData[n].pending.value=!1,s._asyncData[n].status.value="idle"),n in s._asyncDataPromises&&(s._asyncDataPromises[n]&&(s._asyncDataPromises[n].cancelled=!0),s._asyncDataPromises[n]=void 0)}function T(s,n){const e={};for(const f of n)e[f]=s[f];return e}export{I as r,F as u};
